import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import google.generativeai as genai # Para o Google Gemini

# --- Configura√ß√£o da P√°gina Principal ---
st.set_page_config(
    page_title="Olhos da Lei - Super Agente IA",
    page_icon="üëÅÔ∏è‚Äçüó®Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- Gerenciamento de Estado da Sess√£o (para integra√ß√£o entre fun√ß√µes) ---
if 'ocorrencias_simuladas' not in st.session_state:
    st.session_state.ocorrencias_simuladas = []
if 'ultimo_alerta_ia' not in st.session_state:
    st.session_state.ultimo_alerta_ia = None
if 'status_robos' not in st.session_state:
    st.session_state.status_robos = {
        "Rob√¥ Guardi√£o Alpha-1": {"bateria": "90%", "status": "Dispon√≠vel", "local": "Base"},
        "Rob√¥ Guardi√£o Bravo-2": {"bateria": "85%", "status": "Em Patrulha", "local": "Setor Delta"},
        "Rob√¥ Guardi√£o Charlie-3": {"bateria": "70%", "status": "Recarregando", "local": "Base"}
    }

# --- Configura√ß√£o da API Key do Google Gemini (AI Studio) ---
try:
    GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
    genai.configure(api_key=GOOGLE_API_KEY)
    model_pro = genai.GenerativeModel('gemini-1.5-flash-latest')
    gemini_api_configurada = True
except (KeyError, Exception) as e:
    gemini_api_configurada = False
    pass

# --- Barra Lateral de Navega√ß√£o ---
st.sidebar.title("‚öôÔ∏è Fun√ß√µes do Super Agente")
st.sidebar.markdown("---")

lista_funcoes = [
    "P√°gina Inicial",
    "Visualiza√ß√£o de C√¢meras Ao Vivo",
    "An√°lise com IA (Gemini)",
    "Mapa de Ocorr√™ncias",
    "Relat√≥rios Detalhados",
    "Configura√ß√µes de Alerta",
    "Integra√ß√£o com C√£es-Rob√¥s"
]
pagina_selecionada = st.sidebar.radio(
    "Selecione uma fun√ß√£o:",
    lista_funcoes,
    key="nav_funcoes_radio"
)

st.sidebar.markdown("---")
st.sidebar.subheader("Status do Sistema")
if gemini_api_configurada:
    st.sidebar.success("‚úÖ API Gemini Conectada")
else:
    st.sidebar.warning("‚ö†Ô∏è API Gemini N√£o Configurada.\nVerifique os `secrets` para IA.")

st.sidebar.markdown("---")
st.sidebar.info(
    """
    **Olhos da Lei v0.4.2**\n
    Demonstra√ß√£o do ciclo operacional.
    (Verifica√ß√£o de sintaxe)
    """
)
st.sidebar.caption(f"Hoje √© {datetime.now().strftime('%d/%m/%Y')}")


# --- Conte√∫do Principal da P√°gina (controlado pela navega√ß√£o) ---

if pagina_selecionada == "P√°gina Inicial":
    st.title("üëÅÔ∏è‚Äçüó®Ô∏è Olhos da Lei: Super Agente de IA")
    st.subheader("Vigil√¢ncia Inteligente para um Brasil Mais Seguro")
    st.markdown("""
    Bem-vindo √† interface de demonstra√ß√£o do **Olhos da Lei**. Este sistema foi concebido
    para operar autonomamente, utilizando Intelig√™ncia Artificial para:

    - **Monitorar** transmiss√µes de c√¢meras em tempo real.
    - **Detectar** anomalias, amea√ßas e comportamentos de risco.
    - **Classificar** a severidade dos incidentes.
    - **Alertar** as autoridades competentes e unidades de resposta r√°pida (incluindo c√£es-rob√¥s).
    - **Gerar** relat√≥rios e insights para otimizar a seguran√ßa p√∫blica.

    Navegue pelas **Fun√ß√µes** na barra lateral para visualizar simula√ß√µes de cada etapa do ciclo operacional.
    O objetivo √© demonstrar como o Super Agente processaria informa√ß√µes e coordenaria respostas,
    reduzindo a necessidade de monitoramento humano constante e permitindo que os operadores humanos
    foquem em ensinar e aprimorar o sistema.
    """)
    if st.session_state.ultimo_alerta_ia:
        st.warning(f"**√öltimo Alerta da IA:** {st.session_state.ultimo_alerta_ia}")


elif pagina_selecionada == "Visualiza√ß√£o de C√¢meras Ao Vivo":
    st.header("üìπ Visualiza√ß√£o de C√¢meras Ao Vivo")
    st.markdown("Simula√ß√£o de acesso a feeds de c√¢meras p√∫blicas.")

    cameras_disponiveis = {
        "C√¢mera Centro SP (Exemplo Te√≥rico 1)": "LINK_INVALIDO_EXEMPLO_SP_1",
        "Avenida Paulista (Exemplo Te√≥rico 2)": "LINK_INVALIDO_EXEMPLO_SP_2",
        "Praia (Exemplo Gen√©rico - Pode n√£o funcionar)": "http://200.20.203.134/mjpg/video.mjpg",
        "Tr√°fego (Univ. Heidelberg - Exemplo)": "http://pendelcam.kip.uni-heidelberg.de/mjpg/video.mjpg",
        "Adicionar URL MJPEG Manualmente": "MANUAL"
    }
    camera_escolhida_nome = st.selectbox(
        "Selecione uma C√¢mera (Exemplos):",
        list(cameras_disponiveis.keys()),
        key="cam_select_vivo"
    )
    url_camera_selecionada = cameras_disponiveis[camera_escolhida_nome]

    if url_camera_selecionada == "MANUAL":
        url_manual = st.text_input("Digite a URL do stream MJPEG:", key="url_manual_cam")
        if url_manual:
            url_camera_selecionada = url_manual
        else:
            st.info("Por favor, insira uma URL para visualiza√ß√£o manual.")
            url_camera_selecionada = ""

    if url_camera_selecionada and "LINK_INVALIDO" not in url_camera_selecionada and url_camera_selecionada != "MANUAL":
        st.markdown(f"**Visualizando:** {camera_escolhida_nome}")
        st.markdown(f"<small>URL: {url_camera_selecionada}</small>", unsafe_allow_html=True)
        try:
            st.image(url_camera_selecionada, caption=f"Feed da {camera_escolhida_nome}", width=640)
            st.success("Tentando carregar feed da c√¢mera...")
        except Exception as e:
            st.error(f"N√£o foi poss√≠vel carregar o feed: {camera_escolhida_nome}.")
            st.caption(f"Detalhes: {e}")
            st.info("Dica: Apenas streams MJPEG diretos funcionam bem. Links de portais (Ex: CET) geralmente n√£o s√£o compat√≠veis aqui.")
    elif "LINK_INVALIDO" in url_camera_selecionada:
        st.warning(f"Link para '{camera_escolhida_nome}' √© apenas um exemplo te√≥rico. Precisamos de uma URL MJPEG real e funcional.")
        st.image("https://placehold.co/640x480/silver/black?text=Feed+Indispon√≠vel", caption=camera_escolhida_nome)

    st.markdown("---")
    st.subheader("An√°lise Autom√°tica pelo Super Agente")
    if st.button("üëÅÔ∏è‚Äçüó®Ô∏è Iniciar An√°lise de IA nesta C√¢mera", key="analisar_camera_btn"):
        if gemini_api_configurada:
            with st.spinner("Super Agente analisando o feed..."):
                prompt_analise = f"Voc√™ √© o Super Agente Olhos da Lei. Analise um feed de c√¢mera hipot√©tico de '{camera_escolhida_nome}'. Descreva brevemente uma situa√ß√£o de risco potencial (1-2 frases) e classifique o N√≠vel de Risco (1-Baixo, 2-M√©dio, 3-Alto)."
                try:
                    response = model_pro.generate_content(prompt_analise)
                    st.session_state.ultimo_alerta_ia = response.text
                    st.success("An√°lise da IA Conclu√≠da!")
                    st.markdown("**Resultado da An√°lise (Simulada pela IA):**")
                    st.info(response.text)
                    if "N√≠vel de Risco: 2" in response.text or "N√≠vel de Risco: 3" in response.text or "risco: 2" in response.text or "risco: 3" in response.text :
                        nova_ocorrencia = {
                            "id": len(st.session_state.ocorrencias_simuladas) + 1,
                            "descricao": response.text.splitlines()[0] if response.text.splitlines() else "Risco detectado pela IA",
                            "nivel": 3 if ("N√≠vel de Risco: 3" in response.text or "risco: 3" in response.text) else 2,
                            "camera": camera_escolhida_nome,
                            "horario": datetime.now().strftime("%H:%M:%S"),
                            "lat": -23.5505 + (np.random.rand() - 0.5) * 0.1,
                            "lon": -46.6333 + (np.random.rand() - 0.5) * 0.1,
                            "status_acao": "Pendente"
                        }
                        st.session_state.ocorrencias_simuladas.append(nova_ocorrencia)
                        st.toast(f"Nova ocorr√™ncia (N√≠vel {nova_ocorrencia['nivel']}) registrada no Mapa!", icon="üó∫Ô∏è")
                except Exception as e:
                    st.error(f"Erro ao contatar IA: {e}")
        else:
            st.warning("API do Gemini n√£o configurada. An√°lise de IA indispon√≠vel.")

elif pagina_selecionada == "An√°lise com IA (Gemini)":
    st.header("üß† Interagir com o Super Agente (Gemini)")
    st.markdown("Fa√ßa perguntas ou d√™ instru√ß√µes ao Super Agente para simular an√°lises.")

    if not gemini_api_configurada:
        st.error("API do Google Gemini n√£o est√° configurada nos `secrets`. Esta fun√ß√£o est√° desabilitada.")
    else:
        prompt_default = "Super Agente, quais s√£o os procedimentos padr√£o ao detectar uma briga em uma pra√ßa p√∫blica?"
        prompt_usuario = st.text_area("Seu comando ou pergunta para o Super Agente:", value=prompt_default, height=150, key="gemini_prompt_interacao")
        if st.button("üß† Enviar para Super Agente", key="gemini_submit_interacao_btn"):
            if prompt_usuario:  # ESTA √â A LINHA CR√çTICA - Verifique se o ':' est√° aqui!
                with st.spinner("Super Agente processando..."):
                    try:
                        response = model_pro.generate_content(prompt_usuario)
                        st.subheader("Resposta do Super Agente:")
                        st.markdown(response.text)
                        st.session_state.ultimo_alerta_ia = f"Intera√ß√£o: {prompt_usuario[:50]}... -> Resposta IA recebida."
                    except Exception as e:
                        st.error(f"Erro na comunica√ß√£o com a IA: {e}")
            else:
                st.warning("Por favor, digite um comando ou pergunta.")
        st.markdown("---")
        st.caption("Nota: Esta √© uma simula√ß√£o. O Super Agente usa modelos de linguagem para responder.")


elif pagina_selecionada == "Mapa de Ocorr√™ncias":
    st.header("üó∫Ô∏è Mapa de Ocorr√™ncias em Tempo Real")
    st.markdown("Visualiza√ß√£o geogr√°fica de alertas e incidentes detectados.")

    if not st.session_state.ocorrencias_simuladas:
        st.info("Nenhuma ocorr√™ncia simulada registrada ainda. Analise um feed de c√¢mera para gerar alertas.")
    else:
        df_ocorrencias = pd.DataFrame(st.session_state.ocorrencias_simuladas)
        st.subheader("Mapa dos Incidentes")
        if not df_ocorrencias.empty and 'lat' in df_ocorrencias.columns and 'lon' in df_ocorrencias.columns:
            st.map(df_ocorrencias[['lat', 'lon']].dropna(), zoom=10)
        else:
            st.warning("Dados de localiza√ß√£o ausentes ou inv√°lidos para exibir o mapa.")

        st.subheader("Lista de Ocorr√™ncias")
        st.dataframe(df_ocorrencias[['id', 'descricao', 'nivel', 'camera', 'horario', 'status_acao']], use_container_width=True)

        ocorrencia_ids = [o["id"] for o in st.session_state.ocorrencias_simuladas if o["status_acao"] == "Pendente"]
        if ocorrencia_ids:
            ocorrencia_para_acao = st.selectbox("Selecionar Ocorr√™ncia para A√ß√£o:", ocorrencia_ids, key="map_select_ocorrencia")
            acao_tomada = st.selectbox("A√ß√£o a ser tomada (Simula√ß√£o):", ["Despachar C√£o-Rob√¥", "Notificar Pol√≠cia Local", "Monitorar", "Resolver Incidente"], key="map_acao_ocorrencia")
            if st.button("Registrar A√ß√£o", key="map_registrar_acao_btn"):
                for i, oc in enumerate(st.session_state.ocorrencias_simuladas):
                    if oc["id"] == ocorrencia_para_acao:
                        st.session_state.ocorrencias_simuladas[i]["status_acao"] = f"A√ß√£o: {acao_tomada}"
                        st.success(f"A√ß√£o '{acao_tomada}' registrada para ocorr√™ncia {ocorrencia_para_acao}.")
                        if acao_tomada == "Despachar C√£o-Rob√¥":
                            robo_enviado = False
                            for nome_robo, status_info in st.session_state.status_robos.items():
                                if status_info["status"] == "Dispon√≠vel" or status_info["status"] == "Em Patrulha":
                                    st.session_state.status_robos[nome_robo]["status"] = "Em Miss√£o (Ocorr. " + str(ocorrencia_para_acao) + ")"
                                    st.session_state.status_robos[nome_robo]["local"] = f"Ocorr√™ncia {ocorrencia_para_acao}"
                                    st.toast(f"{nome_robo} despachado para ocorr√™ncia {ocorrencia_para_acao}!", icon="üêï‚Äçü¶∫")
                                    robo_enviado = True
                                    break
                            if not robo_enviado:
                                st.warning("Nenhum c√£o-rob√¥ dispon√≠vel no momento para despachar.")
                        st.rerun() 
                
    if st.button("Limpar Ocorr√™ncias Simuladas", key="limpar_ocorrencias_btn"):
        st.session_state.ocorrencias_simuladas = []
        st.session_state.ultimo_alerta_ia = None
        st.success("Ocorr√™ncias simuladas foram limpas.")
        st.rerun()

elif pagina_selecionada == "Relat√≥rios Detalhados":
    st.header("üìä Relat√≥rios e Estat√≠sticas")
    st.markdown("An√°lises sobre detec√ß√µes, respostas e desempenho do sistema (Simula√ß√£o).")

    if not st.session_state.ocorrencias_simuladas:
        st.info("Nenhuma ocorr√™ncia registrada para gerar relat√≥rios.")
    else:
        df_relatorio = pd.DataFrame(st.session_state.ocorrencias_simuladas)
        st.subheader("Resumo das Ocorr√™ncias")
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("Total de Ocorr√™ncias Registradas", len(df_relatorio))
        with col2:
            if not df_relatorio.empty and 'nivel' in df_relatorio.columns:
                ocorrencias_alto_risco = len(df_relatorio[df_relatorio['nivel'] == 3])
                st.metric("Ocorr√™ncias de Alto Risco (N√≠vel 3)", ocorrencias_alto_risco)
            else:
                st.metric("Ocorr√™ncias de Alto Risco (N√≠vel 3)", 0)

        if not df_relatorio.empty and 'nivel' in df_relatorio.columns:
            st.subheader("Distribui√ß√£o de Ocorr√™ncias por N√≠vel de Risco")
            st.bar_chart(df_relatorio['nivel'].value_counts())

            st.subheader("Ocorr√™ncias por C√¢mera (Simulado)")
            if 'camera' in df_relatorio.columns:
                st.bar_chart(df_relatorio['camera'].value_counts())
            else:
                st.write("Dados de c√¢mera n√£o dispon√≠veis para este gr√°fico.")
        else:
            st.write("Dados insuficientes para os gr√°ficos.")

    st.markdown("---")
    st.info("‚ö†Ô∏è Implementa√ß√£o em andamento: Filtros avan√ßados e mais op√ß√µes de relat√≥rio.")


elif pagina_selecionada == "Configura√ß√µes de Alerta":
    st.header("‚öôÔ∏è Configura√ß√µes de Alerta e Notifica√ß√£o")
    st.markdown("Personalize como e quando os alertas s√£o enviados (Simula√ß√£o).")

    st.subheader("Regras de Notifica√ß√£o por N√≠vel de Risco")
    email_n1 = st.checkbox("N√≠vel 1 (Baixo): Notificar por e-mail (Monitoramento)", value=True, key="conf_email_n1")
    sms_n2 = st.checkbox("N√≠vel 2 (M√©dio): Notificar por E-mail e SMS (Aten√ß√£o Requerida)", value=True, key="conf_sms_n2")
    auto_cao_n3 = st.checkbox("N√≠vel 3 (Alto): Acionamento autom√°tico de C√£o-Rob√¥ + Todas as Notifica√ß√µes", value=True, key="conf_cao_n3")

    st.subheader("Contatos para Notifica√ß√µes")
    emails_notificacao = st.text_area(
        "E-mails (um por linha):",
        "equipe.seguranca@exemplo.com\nsupervisor.turno@exemplo.com",
        key="conf_emails_lista"
    )
    telefones_sms_notificacao = st.text_area(
        "Telefones para SMS (um por linha, formato +55DDDXXXXXXXXX):",
        "+5511987654321\n+5521912345678",
        key="conf_telefones_lista"
    )

    if st.button("üíæ Salvar Configura√ß√µes", key="conf_salvar_btn_alerta"):
        st.success("Simula√ß√£o: Configura√ß√µes de alerta salvas com sucesso!")
        st.info("Em um sistema real, estas configura√ß√µes seriam persistidas.")

elif pagina_selecionada == "Integra√ß√£o com C√£es-Rob√¥s":
    st.header("üêï‚Äçü¶∫ Painel de Controle: C√£es-Rob√¥s")
    st.markdown("Monitore e comande as unidades de resposta r√°pida.")

    lista_nomes_robos = list(st.session_state.status_robos.keys())
    robo_selecionado_nome = st.selectbox(
        "Selecione uma Unidade Rob√≥tica:",
        lista_nomes_robos,
        key="robo_select_painel"
    )

    if robo_selecionado_nome:
        status_atual_robo = st.session_state.status_robos[robo_selecionado_nome]
        st.subheader(f"Status Detalhado: {robo_selecionado_nome}")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("N√≠vel da Bateria", status_atual_robo["bateria"])
        with col2:
            st.metric("Status Operacional", status_atual_robo["status"])
        with col3:
            st.metric("Localiza√ß√£o/Miss√£o", status_atual_robo["local"])

        st.image("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR6mZy3S2D930EK3P2TEG2afG24092qC3qyOw&s",
                 caption=f"Interface de telemetria e v√≠deo (simulada) para {robo_selecionado_nome}", width=400)

        st.subheader("Comandos Manuais (Simula√ß√£o)")
        comando_col1, comando_col2 = st.columns(2)
        with comando_col1:
            if st.button(f"üöÅ Enviar {robo_selecionado_nome} para Patrulha", key=f"cmd_patrulha_{robo_selecionado_nome.replace(' ', '_')}"): # Adicionando replace para key
                st.session_state.status_robos[robo_selecionado_nome]["status"] = "Em Patrulha"
                st.session_state.status_robos[robo_selecionado_nome]["local"] = "Setor Designado"
                st.success(f"{robo_selecionado_nome} enviado para patrulha.")
                st.rerun()
        with comando_col2:
            if st.button(f"üè† Retornar {robo_selecionado_nome} √† Base", key=f"cmd_base_{robo_selecionado_nome.replace(' ', '_')}"): # Adicionando replace para key
                st.session_state.status_robos[robo_selecionado_nome]["status"] = "Retornando √† Base"
                st.session_state.status_robos[robo_selecionado_nome]["local"] = "Base"
                st.success(f"{robo_selecionado_nome} retornando √† base.")
                st.rerun()
else:
    st.error("P√°gina n√£o encontrada! Selecione uma fun√ß√£o v√°lida no menu lateral.")
    st.image("https://placehold.co/600x300/red/white?text=Erro+404", caption="P√°gina n√£o existe")
