import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import google.generativeai as genai # Adicionado para o Gemini

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="Olhos da Lei - IA",
    page_icon="üëÅÔ∏è",
    layout="wide"
)

# --- Configura√ß√£o da API Key do Google Gemini ---
# A API Key DEVE ser configurada nos Secrets do Streamlit
# Crie um arquivo chamado .streamlit/secrets.toml no seu reposit√≥rio
# E adicione: GOOGLE_API_KEY = "SUA_API_KEY_AQUI"

try:
    GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
    genai.configure(api_key=GOOGLE_API_KEY)
    model = genai.GenerativeModel('gemini-pro') # Ou outro modelo, como gemini-pro-vision para imagens
    gemini_api_configurada = True
except (KeyError, Exception) as e: # Captura KeyError se a chave n√£o existir ou outra exce√ß√£o na configura√ß√£o
    gemini_api_configurada = False
    # N√£o vamos parar o app se a API n√£o estiver configurada, apenas avisar e desabilitar funcionalidades
    pass # Continuar mesmo se a API n√£o estiver configurada

# --- Barra Lateral para Navega√ß√£o ---
st.sidebar.title("üî≠ Navega√ß√£o Principal")
pagina_selecionada = st.sidebar.radio(
    "Escolha uma se√ß√£o:",
    (
        "P√°gina Inicial",
        "Visualiza√ß√£o de C√¢meras Ao Vivo",
        "An√°lise com IA (Gemini)", # Nova se√ß√£o para testar o Gemini
        "Mapa de Ocorr√™ncias",
        "Relat√≥rios Detalhados",
        "Configura√ß√µes de Alerta",
        "Integra√ß√£o com C√£es-Rob√¥s"
    ),
    key="nav_radio"
)
st.sidebar.markdown("---")
st.sidebar.info(
    """
    **Olhos da Lei v0.3**\n
    Projeto em desenvolvimento.
    """
)
if not gemini_api_configurada:
    st.sidebar.warning("API do Google Gemini n√£o configurada. Funcionalidades de IA limitadas. Verifique os `secrets`.")
else:
    st.sidebar.success("API do Google Gemini conectada!")
st.sidebar.caption("Imers√£o Alura + Google Gemini")


# --- Conte√∫do da P√°gina (varia conforme a sele√ß√£o na barra lateral) ---

if pagina_selecionada == "P√°gina Inicial":
    st.title("üëÅÔ∏è Olhos da Lei: Super-Agente de IA")
    st.subheader("Garantindo a seguran√ßa da popula√ß√£o com Intelig√™ncia Artificial")

    st.markdown("""
    Bem-vindo ao painel de controle do **Olhos da Lei**!

    Este sistema utiliza Intelig√™ncia Artificial para monitorar espa√ßos p√∫blicos atrav√©s de c√¢meras,
    detectando potenciais amea√ßas em tempo real para uma resposta r√°pida e eficaz.

    Use o menu na barra lateral √† esquerda para navegar pelas diferentes funcionalidades.
    """)
    st.info("Esta √© a p√°gina inicial. Selecione uma funcionalidade na barra lateral para come√ßar.", icon="üëà")

elif pagina_selecionada == "Visualiza√ß√£o de C√¢meras Ao Vivo":
    st.header("üìπ Visualiza√ß√£o de C√¢meras Ao Vivo")
    st.markdown("Acompanhe feeds de c√¢meras em tempo real.")

    cameras_publicas = {
        "Praia (Exemplo Gen√©rico - Pode n√£o funcionar)": "http://200.20.203.134/mjpg/video.mjpg",
        "Tr√°fego (Univ. Heidelberg - Exemplo)": "http://pendelcam.kip.uni-heidelberg.de/mjpg/video.mjpg",
        "Webcam (R√∫ssia - Exemplo)": "http://webcampub.multivision.ru:8090/mjpg/video.mjpg",
        "Placeholder - Adicione sua URL MJPEG": ""
    }

    camera_escolhida_nome = st.selectbox(
        "Selecione uma C√¢mera P√∫blica (Exemplo):",
        list(cameras_publicas.keys()),
        key="cam_select"
    )
    url_camera_selecionada = cameras_publicas[camera_escolhida_nome]

    if url_camera_selecionada:
        st.markdown(f"**Visualizando:** {camera_escolhida_nome}")
        st.markdown(f"<small>URL: {url_camera_selecionada}</small>", unsafe_allow_html=True)
        try:
            st.image(url_camera_selecionada, caption=f"Feed da {camera_escolhida_nome}", width=720)
            st.success("Tentando carregar feed da c√¢mera...")
        except Exception as e:
            st.error(f"N√£o foi poss√≠vel carregar o feed da c√¢mera selecionada.")
            st.warning(f"Detalhes do erro: {e}")
            st.info("Dica: Streams MJPEG s√£o mais compat√≠veis. Verifique se a URL est√° correta e acess√≠vel.")
            st.markdown("Voc√™ pode tentar abrir a URL diretamente no seu navegador para testar.")
    elif camera_escolhida_nome == "Placeholder - Adicione sua URL MJPEG":
        st.info("Adicione uma URL de stream MJPEG v√°lida no c√≥digo para testar esta funcionalidade.")
    else:
        st.info("Selecione uma c√¢mera da lista para visualizar.")

    st.markdown("---")
    st.subheader("An√°lise de IA desta C√¢mera (Simula√ß√£o)")
    if st.button("Analisar feed da c√¢mera com IA", key="analisar_feed_btn"):
        if gemini_api_configurada:
            st.info("ü§ñ Implementa√ß√£o em andamento: An√°lise de IA para esta c√¢mera usando Gemini...")
            # Aqui voc√™ chamaria a fun√ß√£o que captura um frame e envia para o Gemini Vision
        else:
            st.warning("API do Gemini n√£o configurada. N√£o √© poss√≠vel analisar.")

elif pagina_selecionada == "An√°lise com IA (Gemini)":
    st.header("üß† An√°lise com Intelig√™ncia Artificial (Gemini)")
    st.markdown("Use o poder do Google Gemini para an√°lises.")

    if not gemini_api_configurada:
        st.error("API do Google Gemini n√£o est√° configurada nos Secrets. Esta se√ß√£o n√£o pode funcionar.")
    else:
        st.info("API do Gemini conectada! Voc√™ pode usar modelos como 'gemini-pro' para texto ou 'gemini-pro-vision' para imagens.")

        prompt_usuario = st.text_area("Digite seu prompt para o Gemini (ex: descreva uma cena de seguran√ßa em uma pra√ßa p√∫blica):", height=100, key="gemini_prompt")
        if st.button("Enviar para Gemini", key="gemini_submit_btn"):
            if prompt_usuario:
                try:
                    with st.spinner("Aguardando resposta do Gemini..."):
                        response = model.generate_content(prompt_usuario)
                        st.subheader("Resposta do Gemini:")
                        st.markdown(response.text)
                except Exception as e:
                    st.error(f"Erro ao chamar a API do Gemini: {e}")
            else:
                st.warning("Por favor, digite um prompt.")

        st.markdown("---")
        st.subheader("Teste com Imagem (Funcionalidade Futura para Gemini Vision)")
        uploaded_file = st.file_uploader("Carregue uma imagem para an√°lise (placeholder):", type=["jpg", "jpeg", "png"], key="img_upload_gemini")
        if uploaded_file is not None:
            st.image(uploaded_file, caption="Imagem Carregada", use_column_width=True)
            if st.button("Analisar Imagem com Gemini Vision (Simulado)", key="gemini_vision_btn"):
                st.info("ü§ñ Implementa√ß√£o em andamento: An√°lise desta imagem com Gemini Vision.")
                # Em uma implementa√ß√£o real:
                # image_bytes = uploaded_file.getvalue()
                # image_parts = [{"mime_type": uploaded_file.type, "data": image_bytes}]
                # prompt_parts = [image_parts[0], "\nDescreva esta imagem em detalhes."]
                # response = model_vision.generate_content(prompt_parts) -> (usar o modelo gemini-pro-vision)
                # st.markdown(response.text)


elif pagina_selecionada == "Mapa de Ocorr√™ncias":
    st.header("üó∫Ô∏è Mapa de Ocorr√™ncias")
    st.markdown("Visualize geograficamente as ocorr√™ncias e alertas detectados.")
    map_data = pd.DataFrame(
        np.random.randn(20, 2) / np.array([10, 10]) + np.array([-23.5505, -46.6333]), # Coordenadas pr√≥ximas a SP
        columns=['lat', 'lon']
    )
    st.map(map_data, zoom=10)
    st.subheader("Detalhes da Ocorr√™ncia Selecionada (Simula√ß√£o)")
    ocorrencia_id = st.text_input("ID da Ocorr√™ncia (Ex: 12345):", "", key="map_ocorrencia_id")
    if st.button("Buscar Detalhes da Ocorr√™ncia", key="map_buscar_btn"):
        if ocorrencia_id:
            st.info(f"‚ö†Ô∏è Implementa√ß√£o em andamento: Busca de detalhes para ocorr√™ncia {ocorrencia_id}.")
        else:
            st.warning("Por favor, insira um ID de ocorr√™ncia.")

elif pagina_selecionada == "Relat√≥rios Detalhados":
    st.header("üìä Relat√≥rios Detalhados")
    st.markdown("Acesse an√°lises e estat√≠sticas sobre as detec√ß√µes e o desempenho do sistema.")
    col1, col2 = st.columns(2)
    with col1:
        tipo_relatorio = st.selectbox(
            "Tipo de Relat√≥rio:",
            ("Detec√ß√µes por Per√≠odo", "Efici√™ncia de Resposta", "Tipos de Amea√ßas Comuns", "Performance por C√¢mera"),
            key="rel_tipo"
        )
    with col2:
        data_hoje = datetime.now().date() # Usar .date() para date_input
        data_inicio_padrao = data_hoje - timedelta(days=7)
        periodo = st.date_input(
            "Selecione o Per√≠odo:",
            [data_inicio_padrao, data_hoje], # [inicio, fim]
            key="rel_periodo",
            max_date=data_hoje # Evitar datas futuras
        )
    if st.button("Gerar Relat√≥rio", key="rel_gerar_btn"):
        if periodo and len(periodo) == 2:
             st.info(f"‚ö†Ô∏è Implementa√ß√£o em andamento: Gera√ß√£o do relat√≥rio '{tipo_relatorio}' para o per√≠odo de {periodo[0].strftime('%d/%m/%Y')} a {periodo[1].strftime('%d/%m/%Y')}.")
        else:
            st.warning("Por favor, selecione um per√≠odo v√°lido (data de in√≠cio e fim).")
    st.markdown("---")
    st.subheader("Visualiza√ß√£o do Relat√≥rio (Exemplo)")
    st.image("https://placehold.co/700x300/EFEFEF/AAAAAA/png?text=Gr√°fico+do+Relat√≥rio+Aqui", caption="Exemplo de visualiza√ß√£o de dados do relat√≥rio")

elif pagina_selecionada == "Configura√ß√µes de Alerta":
    st.header("‚öôÔ∏è Configura√ß√µes de Alerta")
    st.markdown("Personalize como e quando os alertas s√£o enviados e para quem.")
    st.subheader("N√≠veis de Risco e A√ß√µes Imediatas")
    alerta_email_n1 = st.checkbox("Ativar alertas por e-mail para N√≠vel 1 (Atividade Suspeita)", value=True, key="conf_email_n1")
    alerta_sms_n2 = st.checkbox("Ativar alertas por SMS para N√≠vel 2 (Amea√ßa Potencial)", value=True, key="conf_sms_n2")
    acionar_caes_n3 = st.checkbox("Acionar C√£es-Rob√¥s automaticamente para N√≠vel 3 (Amea√ßa Iminente)", key="conf_caes_n3")
    st.subheader("Contatos para Notifica√ß√£o")
    emails_notificacao = st.text_area(
        "E-mails para notifica√ß√£o (um por linha):",
        "alerta.policia@exemplo.gov.br\nsupervisor.seguranca@exemplo.com\nresponsavel.area@exemplo.com.br",
        key="conf_emails"
    )
    telefones_sms = st.text_area(
        "Telefones para SMS (um por linha, formato +55DDDXXXXXXXXX):",
        "+5511999998888\n+5521988887777",
        key="conf_telefones"
    )
    if st.button("Salvar Configura√ß√µes de Alerta", key="conf_salvar_btn"):
        st.info("‚ö†Ô∏è Implementa√ß√£o em andamento: Salvamento das configura√ß√µes de alerta.")

elif pagina_selecionada == "Integra√ß√£o com C√£es-Rob√¥s":
    st.header("üêï‚Äçü¶∫ Integra√ß√£o com C√£es-Rob√¥s")
    st.markdown("Monitore e controle as unidades de c√£es-rob√¥s para resposta a amea√ßas.")
    num_robos_disponiveis = 3
    lista_robos = [f"Rob√¥ Guardi√£o Alpha-{i+1}" for i in range(num_robos_disponiveis)]
    robo_selecionado = st.selectbox(
        "Selecione uma Unidade Rob√≥tica:",
        lista_robos,
        key="robo_select"
    )
    st.subheader(f"Status do {robo_selecionado}")
    col1, col2, col3 = st.columns(3)
    bateria_percent = np.random.randint(60, 101)
    status_robo = np.random.choice(["Em Patrulha", "Dispon√≠vel", "Recarregando", "Em Miss√£o"])
    local_robo = f"Setor {np.random.choice(['Alpha', 'Beta', 'Gamma'])}-{np.random.randint(1,10)}"
    with col1:
        st.metric("N√≠vel da Bateria", f"{bateria_percent}%", f"{bateria_percent-np.random.randint(0,5)}%" if bateria_percent > 65 else f"-{np.random.randint(0,5)}%")
    with col2:
        st.metric("Status Operacional", status_robo)
    with col3:
        st.metric("Localiza√ß√£o Atual", local_robo)
    st.subheader("Comandos T√°ticos")
    if st.button(f"Enviar {robo_selecionado} para Ponto de Alerta Imediato", key="robo_alerta_btn"):
        st.info(f"‚ö†Ô∏è Implementa√ß√£o em andamento: Comando para {robo_selecionado} ir ao ponto de alerta.")
    if st.button(f"Instruir {robo_selecionado} a Iniciar Protocolo de Conten√ß√£o", key="robo_conter_btn"):
        st.info(f"‚ö†Ô∏è Implementa√ß√£o em andamento: Comando de conten√ß√£o para {robo_selecionado}.")
    if st.button(f"Retornar {robo_selecionado} para Base de Recarga", key="robo_base_btn"):
        st.info(f"‚ö†Ô∏è Implementa√ß√£o em andamento: Comando para {robo_selecionado} retornar √† base.")
    st.image("https://placehold.co/600x350/333333/FFFFFF/png?text=Interface+de+Controle+do+Rob√¥", caption=f"Simula√ß√£o da interface de v√≠deo e controle para o {robo_selecionado}")

else:
    st.error("P√°gina n√£o encontrada! Selecione uma op√ß√£o no menu lateral.")
